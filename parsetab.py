
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDErightPOTENCYDIVIDE EQUALS FLOAT INT MINUS MULTIPLY NAME PARENTHESES_L PARENTHESES_R PLUS POTENCY\n    calc : expression\n         | var_assign\n         | empty\n    \n    var_assign : NAME EQUALS expression\n         \n    expression : expression MULTIPLY expression\n               | expression DIVIDE expression \n               | expression PLUS expression\n               | expression MINUS expression\n               | expression POTENCY expression\n         \n    expression : INT\n               | FLOAT\n    \n    expression : PARENTHESES_L expression PARENTHESES_R\n         \n    expression : NAME\n    \n    empty :\n    '
    
_lr_action_items = {'INT':([0,7,9,10,11,12,13,16,],[5,5,5,5,5,5,5,5,]),'FLOAT':([0,7,9,10,11,12,13,16,],[6,6,6,6,6,6,6,6,]),'PARENTHESES_L':([0,7,9,10,11,12,13,16,],[7,7,7,7,7,7,7,7,]),'NAME':([0,7,9,10,11,12,13,16,],[8,15,15,15,15,15,15,15,]),'$end':([0,1,2,3,4,5,6,8,15,17,18,19,20,21,22,23,],[-14,0,-1,-2,-3,-10,-11,-13,-13,-5,-6,-7,-8,-9,-12,-4,]),'MULTIPLY':([2,5,6,8,14,15,17,18,19,20,21,22,23,],[9,-10,-11,-13,9,-13,-5,-6,9,9,-9,-12,9,]),'DIVIDE':([2,5,6,8,14,15,17,18,19,20,21,22,23,],[10,-10,-11,-13,10,-13,-5,-6,10,10,-9,-12,10,]),'PLUS':([2,5,6,8,14,15,17,18,19,20,21,22,23,],[11,-10,-11,-13,11,-13,-5,-6,-7,-8,-9,-12,11,]),'MINUS':([2,5,6,8,14,15,17,18,19,20,21,22,23,],[12,-10,-11,-13,12,-13,-5,-6,-7,-8,-9,-12,12,]),'POTENCY':([2,5,6,8,14,15,17,18,19,20,21,22,23,],[13,-10,-11,-13,13,-13,13,13,13,13,13,-12,13,]),'PARENTHESES_R':([5,6,14,15,17,18,19,20,21,22,],[-10,-11,22,-13,-5,-6,-7,-8,-9,-12,]),'EQUALS':([8,],[16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,7,9,10,11,12,13,16,],[2,14,17,18,19,20,21,23,]),'var_assign':([0,],[3,]),'empty':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_cal','Anal_lex_YAAC.py',60),
  ('calc -> var_assign','calc',1,'p_cal','Anal_lex_YAAC.py',61),
  ('calc -> empty','calc',1,'p_cal','Anal_lex_YAAC.py',62),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','Anal_lex_YAAC.py',71),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','Anal_lex_YAAC.py',78),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','Anal_lex_YAAC.py',79),
  ('expression -> expression PLUS expression','expression',3,'p_expression','Anal_lex_YAAC.py',80),
  ('expression -> expression MINUS expression','expression',3,'p_expression','Anal_lex_YAAC.py',81),
  ('expression -> expression POTENCY expression','expression',3,'p_expression','Anal_lex_YAAC.py',82),
  ('expression -> INT','expression',1,'p_expression_int_float','Anal_lex_YAAC.py',88),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','Anal_lex_YAAC.py',89),
  ('expression -> PARENTHESES_L expression PARENTHESES_R','expression',3,'p_expression_parentheses','Anal_lex_YAAC.py',95),
  ('expression -> NAME','expression',1,'p_expression_var','Anal_lex_YAAC.py',101),
  ('empty -> <empty>','empty',0,'p_empty','Anal_lex_YAAC.py',110),
]
